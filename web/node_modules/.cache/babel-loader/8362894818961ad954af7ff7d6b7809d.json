{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/media/michele/Acer/Users/miche/Desktop/PROJETOS/meritial/src/hooks/toast.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useCallback, useContext, useState } from 'react';\nimport { v4 as uuid } from 'uuid';\nimport ToastContainer from '../components/ToastContainer';\nconst ToasContext = /*#__PURE__*/createContext({});\nexport const ToastMessage = ({\n  children\n}) => {\n  _s();\n\n  const [messages, setMessages] = useState([]);\n  const addToast = useCallback(({\n    type,\n    title,\n    description\n  }) => {\n    const id = uuid();\n    const toast = {\n      id,\n      type,\n      title,\n      description\n    };\n    setMessages(state => [...state, toast]);\n  }, []);\n  const removeToast = useCallback(id => {\n    setMessages(oldMessages => oldMessages.filter(message => message.id !== id));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ToasContext.Provider, {\n    value: {\n      addToast,\n      removeToast\n    },\n    children: [children, /*#__PURE__*/_jsxDEV(ToastContainer, {\n      messages: messages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ToastMessage, \"B21RFwG32JC+fV89pZ9By69CAIM=\");\n\n_c = ToastMessage;\nexport function useToast() {\n  _s2();\n\n  const context = useContext(ToasContext);\n\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider.');\n  }\n\n  return context;\n}\n\n_s2(useToast, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"ToastMessage\");","map":{"version":3,"sources":["/media/michele/Acer/Users/miche/Desktop/PROJETOS/meritial/src/hooks/toast.tsx"],"names":["React","createContext","useCallback","useContext","useState","v4","uuid","ToastContainer","ToasContext","ToastMessage","children","messages","setMessages","addToast","type","title","description","id","toast","state","removeToast","oldMessages","filter","message","useToast","context","Error"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,WAA/B,EAA4CC,UAA5C,EAAwDC,QAAxD,QAAwE,OAAxE;AACA,SAASC,EAAE,IAAIC,IAAf,QAA2B,MAA3B;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AAaA,MAAMC,WAAW,gBAAGP,aAAa,CAAmB,EAAnB,CAAjC;AAEA,OAAO,MAAMQ,YAAsB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACtD,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAiB,EAAjB,CAAxC;AAEA,QAAMS,QAAQ,GAAGX,WAAW,CAC1B,CAAC;AAAEY,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,GAAD,KAA4D;AAC1D,UAAMC,EAAE,GAAGX,IAAI,EAAf;AACA,UAAMY,KAAK,GAAG;AACZD,MAAAA,EADY;AAEZH,MAAAA,IAFY;AAGZC,MAAAA,KAHY;AAIZC,MAAAA;AAJY,KAAd;AAMAJ,IAAAA,WAAW,CAACO,KAAK,IAAI,CAAC,GAAGA,KAAJ,EAAWD,KAAX,CAAV,CAAX;AACD,GAVyB,EAW1B,EAX0B,CAA5B;AAaA,QAAME,WAAW,GAAGlB,WAAW,CAAEe,EAAD,IAAgB;AAC9CL,IAAAA,WAAW,CAACS,WAAW,IACrBA,WAAW,CAACC,MAAZ,CAAmBC,OAAO,IAAIA,OAAO,CAACN,EAAR,KAAeA,EAA7C,CADS,CAAX;AAGD,GAJ8B,EAI5B,EAJ4B,CAA/B;AAMA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEJ,MAAAA,QAAF;AAAYO,MAAAA;AAAZ,KAA7B;AAAA,eACGV,QADH,eAEE,QAAC,cAAD;AAAgB,MAAA,QAAQ,EAAEC;AAA1B;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CA5BM;;GAAMF,Y;;KAAAA,Y;AA8Bb,OAAO,SAASe,QAAT,GAAoB;AAAA;;AACzB,QAAMC,OAAO,GAAGtB,UAAU,CAACK,WAAD,CAA1B;;AACA,MAAI,CAACiB,OAAL,EAAc;AACZ,UAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACD;;AACD,SAAOD,OAAP;AACD;;IANeD,Q","sourcesContent":["import React, { createContext, useCallback, useContext, useState } from 'react';\nimport { v4 as uuid } from 'uuid';\nimport ToastContainer from '../components/ToastContainer';\n\nexport interface ToastMessage {\n  id: string;\n  type?: 'success' | 'info' | 'error';\n  title: string;\n  description?: string;\n}\n\ninterface ToastContextData {\n  addToast(messages: Omit<ToastMessage, 'id'>): void;\n  removeToast(id: string): void;\n}\nconst ToasContext = createContext<ToastContextData>({} as ToastContextData);\n\nexport const ToastMessage: React.FC = ({ children }) => {\n  const [messages, setMessages] = useState<ToastMessage[]>([]);\n\n  const addToast = useCallback(\n    ({ type, title, description }: Omit<ToastMessage, 'id'>) => {\n      const id = uuid();\n      const toast = {\n        id,\n        type,\n        title,\n        description,\n      };\n      setMessages(state => [...state, toast]);\n    },\n    [],\n  );\n  const removeToast = useCallback((id: string) => {\n    setMessages(oldMessages =>\n      oldMessages.filter(message => message.id !== id),\n    );\n  }, []);\n\n  return (\n    <ToasContext.Provider value={{ addToast, removeToast }}>\n      {children}\n      <ToastContainer messages={messages} />\n    </ToasContext.Provider>\n  );\n};\n\nexport function useToast() {\n  const context = useContext(ToasContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider.');\n  }\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}