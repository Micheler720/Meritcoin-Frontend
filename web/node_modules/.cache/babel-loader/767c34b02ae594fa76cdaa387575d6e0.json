{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/media/michele/Acer/Users/miche/Desktop/PROJETOS/meritial/web/src/hooks/menu.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useContext, useState } from 'react';\nimport { useSpring } from 'react-spring';\nimport Menu from '../components/Menu';\nconst MenuContext = /*#__PURE__*/createContext({});\nexport const MenuVisible = ({\n  children\n}) => {\n  _s();\n\n  const [isVisibleMenu, setIsVisibleMenu] = useState(false);\n  const menuTransictions = useSpring({\n    /* to: {\n      opacity: isVisibleMenu ? 1 : 0,\n      display: isVisibleMenu ? 'flex' : 'none',\n      transition: '0.2s',\n    },\n    from: {\n      opacity: isVisibleMenu ? 0 : 1,\n      display: isVisibleMenu ? 'none' : 'flex',\n      transition: '2s',\n    }, */\n  });\n  return /*#__PURE__*/_jsxDEV(MenuContext.Provider, {\n    value: {\n      isVisibleMenu,\n      setIsVisibleMenu\n    },\n    children: [isVisibleMenu && /*#__PURE__*/_jsxDEV(Menu, {\n      style: menuTransictions,\n      isVisibleMenu: isVisibleMenu\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this), children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MenuVisible, \"aQrqUGtuHK36uXzzZr/fFX3W5PU=\", false, function () {\n  return [useSpring];\n});\n\n_c = MenuVisible;\nexport function useMenu() {\n  _s2();\n\n  const context = useContext(MenuContext);\n\n  if (!context) {\n    throw new Error('useMenu must be used within an AuthProvider.');\n  }\n\n  return context;\n}\n\n_s2(useMenu, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"MenuVisible\");","map":{"version":3,"sources":["/media/michele/Acer/Users/miche/Desktop/PROJETOS/meritial/web/src/hooks/menu.tsx"],"names":["React","createContext","useContext","useState","useSpring","Menu","MenuContext","MenuVisible","children","isVisibleMenu","setIsVisibleMenu","menuTransictions","useMenu","context","Error"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,QAA3C,QAA2D,OAA3D;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AAOA,MAAMC,WAAW,gBAAGL,aAAa,CAAqB,EAArB,CAAjC;AAEA,OAAO,MAAMM,WAAqB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACrD,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCP,QAAQ,CAAC,KAAD,CAAlD;AAEA,QAAMQ,gBAAgB,GAAGP,SAAS,CAAC;AACjC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVqC,GAAD,CAAlC;AAaA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEK,MAAAA,aAAF;AAAiBC,MAAAA;AAAjB,KAA7B;AAAA,eACGD,aAAa,iBACZ,QAAC,IAAD;AAAM,MAAA,KAAK,EAAEE,gBAAb;AAA+B,MAAA,aAAa,EAAEF;AAA9C;AAAA;AAAA;AAAA;AAAA,YAFJ,EAIGD,QAJH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAxBM;;GAAMD,W;UAGcH,S;;;KAHdG,W;AA0Bb,OAAO,SAASK,OAAT,GAAuC;AAAA;;AAC5C,QAAMC,OAAO,GAAGX,UAAU,CAACI,WAAD,CAA1B;;AACA,MAAI,CAACO,OAAL,EAAc;AACZ,UAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACD;;AACD,SAAOD,OAAP;AACD;;IANeD,O","sourcesContent":["import React, { createContext, useContext, useState } from 'react';\nimport { useSpring } from 'react-spring';\nimport Menu from '../components/Menu';\n\ninterface IMenuContextCreate {\n  isVisibleMenu: boolean;\n  setIsVisibleMenu(isVisible: boolean): void;\n}\n\nconst MenuContext = createContext<IMenuContextCreate>({} as IMenuContextCreate);\n\nexport const MenuVisible: React.FC = ({ children }) => {\n  const [isVisibleMenu, setIsVisibleMenu] = useState(false);\n\n  const menuTransictions = useSpring({\n    /* to: {\n      opacity: isVisibleMenu ? 1 : 0,\n      display: isVisibleMenu ? 'flex' : 'none',\n      transition: '0.2s',\n    },\n    from: {\n      opacity: isVisibleMenu ? 0 : 1,\n      display: isVisibleMenu ? 'none' : 'flex',\n      transition: '2s',\n    }, */\n  });\n\n  return (\n    <MenuContext.Provider value={{ isVisibleMenu, setIsVisibleMenu }}>\n      {isVisibleMenu && (\n        <Menu style={menuTransictions} isVisibleMenu={isVisibleMenu} />\n      )}\n      {children}\n    </MenuContext.Provider>\n  );\n};\n\nexport function useMenu(): IMenuContextCreate {\n  const context = useContext(MenuContext);\n  if (!context) {\n    throw new Error('useMenu must be used within an AuthProvider.');\n  }\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}