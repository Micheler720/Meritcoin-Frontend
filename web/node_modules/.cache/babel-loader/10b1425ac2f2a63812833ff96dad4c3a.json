{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/media/michele/Acer/Users/miche/Desktop/PROJETOS/meritial/web/src/hooks/alert.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useCallback, useContext, useState } from 'react';\nimport Alert from '../components/Alert';\nconst AlertContext = /*#__PURE__*/createContext({});\nexport const AlertMessage = ({\n  children\n}) => {\n  _s();\n\n  const [alert, setAlert] = useState({});\n  const [confirmation, setConfirmation] = useState(true);\n  const addAlert = useCallback(({\n    message,\n    type\n  }) => {\n    setAlert({\n      message,\n      type\n    });\n  }, []);\n  const alertConfirm = useCallback(response => {\n    setConfirmation(response);\n    setAlert({});\n  }, []);\n  const handleConfirmation = useCallback(() => {\n    return confirmation;\n  }, [confirmation]);\n  return /*#__PURE__*/_jsxDEV(AlertContext.Provider, {\n    value: {\n      addAlert,\n      alertConfirm,\n      confirmation,\n      handleConfirmation\n    },\n    children: /*#__PURE__*/_jsxDEV(Alert, {\n      message: alert.message,\n      type: alert.type,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AlertMessage, \"7LZ9v/IVwzOCi19SGkLEPBIorPE=\");\n\n_c = AlertMessage;\nexport function useAlert() {\n  _s2();\n\n  const context = useContext(AlertContext);\n\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider.');\n  }\n\n  return context;\n}\n\n_s2(useAlert, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"AlertMessage\");","map":{"version":3,"sources":["/media/michele/Acer/Users/miche/Desktop/PROJETOS/meritial/web/src/hooks/alert.tsx"],"names":["React","createContext","useCallback","useContext","useState","Alert","AlertContext","AlertMessage","children","alert","setAlert","confirmation","setConfirmation","addAlert","message","type","alertConfirm","response","handleConfirmation","useAlert","context","Error"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,WAA/B,EAA4CC,UAA5C,EAAwDC,QAAxD,QAAwE,OAAxE;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AAaA,MAAMC,YAAY,gBAAGL,aAAa,CAAoB,EAApB,CAAlC;AAEA,OAAO,MAAMM,YAAsB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACtD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAW,EAAX,CAAlC;AACA,QAAM,CAACO,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAAU,IAAV,CAAhD;AAEA,QAAMS,QAAQ,GAAGX,WAAW,CAAC,CAAC;AAAEY,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAD,KAAiC;AAC5DL,IAAAA,QAAQ,CAAC;AACPI,MAAAA,OADO;AAEPC,MAAAA;AAFO,KAAD,CAAR;AAID,GAL2B,EAKzB,EALyB,CAA5B;AAOA,QAAMC,YAAY,GAAGd,WAAW,CAAEe,QAAD,IAAuB;AACtDL,IAAAA,eAAe,CAACK,QAAD,CAAf;AACAP,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACD,GAH+B,EAG7B,EAH6B,CAAhC;AAKA,QAAMQ,kBAAkB,GAAGhB,WAAW,CAAC,MAAe;AACpD,WAAOS,YAAP;AACD,GAFqC,EAEnC,CAACA,YAAD,CAFmC,CAAtC;AAIA,sBACE,QAAC,YAAD,CAAc,QAAd;AACE,IAAA,KAAK,EAAE;AAAEE,MAAAA,QAAF;AAAYG,MAAAA,YAAZ;AAA0BL,MAAAA,YAA1B;AAAwCO,MAAAA;AAAxC,KADT;AAAA,2BAGE,QAAC,KAAD;AAAO,MAAA,OAAO,EAAET,KAAK,CAACK,OAAtB;AAA+B,MAAA,IAAI,EAAEL,KAAK,CAACM,IAA3C;AAAA,gBACGP;AADH;AAAA;AAAA;AAAA;AAAA;AAHF;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CA7BM;;GAAMD,Y;;KAAAA,Y;AA+Bb,OAAO,SAASY,QAAT,GAAoB;AAAA;;AACzB,QAAMC,OAAO,GAAGjB,UAAU,CAACG,YAAD,CAA1B;;AACA,MAAI,CAACc,OAAL,EAAc;AACZ,UAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACD;;AACD,SAAOD,OAAP;AACD;;IANeD,Q","sourcesContent":["import React, { createContext, useCallback, useContext, useState } from 'react';\nimport Alert from '../components/Alert';\n\ninterface ICreateAlertProps {\n  addAlert(data: IMessage): void;\n  alertConfirm(confirmation: boolean): void;\n  confirmation?: boolean;\n  handleConfirmation(): boolean;\n}\ninterface IMessage {\n  message: string;\n  type?: 'error' | 'confirmation' | 'alert' | 'success';\n}\n\nconst AlertContext = createContext<ICreateAlertProps>({} as ICreateAlertProps);\n\nexport const AlertMessage: React.FC = ({ children }) => {\n  const [alert, setAlert] = useState<IMessage>({} as IMessage);\n  const [confirmation, setConfirmation] = useState<boolean>(true);\n\n  const addAlert = useCallback(({ message, type }: IMessage) => {\n    setAlert({\n      message,\n      type,\n    });\n  }, []);\n\n  const alertConfirm = useCallback((response: boolean) => {\n    setConfirmation(response);\n    setAlert({} as IMessage);\n  }, []);\n\n  const handleConfirmation = useCallback((): boolean => {\n    return confirmation;\n  }, [confirmation]);\n\n  return (\n    <AlertContext.Provider\n      value={{ addAlert, alertConfirm, confirmation, handleConfirmation }}\n    >\n      <Alert message={alert.message} type={alert.type}>\n        {children}\n      </Alert>\n    </AlertContext.Provider>\n  );\n};\n\nexport function useAlert() {\n  const context = useContext(AlertContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider.');\n  }\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}